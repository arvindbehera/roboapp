{"version":3,"sources":["Card.js","CardList.js","Searchbox.js","App.js","serviceWorker.js","index.js","robots.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","_user","i","Card","key","username","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACE,yBAAKC,UAAU,mDACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACE,4BAAKF,GACL,2BAAIC,MCYGK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACX,OACI,6BACMA,EAAOC,KAAI,SAACC,EAAOC,GAC7B,OAAQ,kBAACC,EAAD,CACJC,IAAKF,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBa,SAAUN,EAAOG,GAAGG,SACpBZ,MAAOM,EAAOG,GAAGT,aCIda,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACE,yBAAKb,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCmCHI,G,kBAtCb,aAAe,IAAD,8BACZ,+CAiBFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAjB1C,EAAKC,MAAQ,CACXnB,OAAQ,GACRQ,YAAa,IAJH,E,iFAQO,IAAD,OAClBY,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAAEhB,OAAQwB,S,+BAOpB,IAAD,OACDC,EAAkBC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAA3B,GAC/C,OAAOA,EAAOP,KACXmC,cACAC,SAAS,EAAKV,MAAMX,YAAYoB,kBAGrC,OACE,yBAAKhC,UAAU,MACb,yCACA,kBAAC,EAAD,CAAWa,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,CAAUd,OAAQyB,S,GAjCRK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,CAAKrC,OCVe,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNa,SAAU,iBACVZ,MAAO,6BDhDT4C,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.7e520c7c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst card = ({name, email, id}) => {\r\n  //const { name, email, id } = demo;\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?100x100`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => { \r\n        return(\r\n            <div>\r\n                { robots.map((_user, i) => {\r\n        return (<Card\r\n            key={i} \r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            username={robots[i].username}\r\n            email={robots[i].email}\r\n          />);\r\n        }) }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n    /* return (\r\n      <div>\r\n        <Card\r\n          id={robots[0].id}\r\n          name={robots[0].name}\r\n          username={robots[0].username}\r\n          email={robots[0].email}\r\n        />\r\n        <Card\r\n          id={robots[1].id}\r\n          name={robots[1].name}\r\n          username={robots[1].username}\r\n          email={robots[1].email}\r\n        />\r\n        <Card\r\n          id={robots[2].id}\r\n          name={robots[2].name}\r\n          username={robots[2].username}\r\n          email={robots[2].email}\r\n        />\r\n        <Card\r\n          id={robots[3].id}\r\n          name={robots[3].name}\r\n          username={robots[3].username}\r\n          email={robots[3].email}\r\n        />\r\n      </div>\r\n    );\r\n} */\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Searchbox = ( {searchfield, searchChange}) => {\r\n  return (\r\n    <div className=\"pa1\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbox;","import React, { Component } from \"react\";\r\nimport CardList from \"./CardList\";\r\n// import { robots } from \"./robots\";\r\nimport Searchbox from \"./Searchbox\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n  render() {\r\n    const filterredRobots = this.state.robots.filter(robots => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    \r\n    return (\r\n      <div className=\"tc\">\r\n        <h1> ROBO APP</h1>\r\n        <Searchbox searchChange={this.onSearchChange} />\r\n        <CardList robots={filterredRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\n//import Card from './Card';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './robots';\n\nReactDOM.render(\n  <App robots={robots}/>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: \"Leanne Graham\",\r\n    username: \"Bret\",\r\n    email: \"Sincere@april.biz\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Ervin Howell\",\r\n    username: \"Antonette\",\r\n    email: \"Shanna@melissa.tv\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Clementine Bauch\",\r\n    username: \"Samantha\",\r\n    email: \"Nathan@yesenia.net\"\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Patricia Lebsack\",\r\n    username: \"Karianne\",\r\n    email: \"Julianne.OConner@kory.org\"\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Chelsey Dietrich\",\r\n    username: \"Kamren\",\r\n    email: \"Lucio_Hettinger@annie.ca\"\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Mrs. Dennis Schulist\",\r\n    username: \"Leopoldo_Corkery\",\r\n    email: \"Karley_Dach@jasper.info\"\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Kurtis Weissnat\",\r\n    username: \"Elwyn.Skiles\",\r\n    email: \"Telly.Hoeger@billy.biz\"\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Nicholas Runolfsdottir V\",\r\n    username: \"Maxime_Nienow\",\r\n    email: \"Sherwood@rosamond.me\"\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Glenna Reichert\",\r\n    username: \"Delphine\",\r\n    email: \"Chaim_McDermott@dana.io\"\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Clementina DuBuque\",\r\n    username: \"Moriah.Stanton\",\r\n    email: \"Rey.Padberg@karina.biz\"\r\n  }\r\n];"],"sourceRoot":""}